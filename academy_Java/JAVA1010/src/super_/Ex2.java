package super_;

public class Ex2 {

	public static void main(String[] args) {
		/*
		 * < 상속에서의 생성자 >
		 * - 생성자는 상속되지 않음
		 *   => 생성자 이름은 자신의 클래스 이름과 동일한데
		 *      만약, 상속받을 경우 생성자 이름이 부모 클래스 이므로
		 *      생성자 작성 규칙에 위배됨
		 * - 서브클래스의 인스턴스를 생성할 때는 자동으로 슈퍼클래스의 인스턴스를
		 *   먼저 생성한 후 서브클래스의 인스턴스가 생성됨
		 *   => 이 때, 서브클래스 생성자에서 슈퍼클래스 기본생성자를 자동 호출
		 *   => 만약, 슈퍼클래스에 파라미터 생성자만 존재할 경우
		 *      서브클래스 생성자에서 컴파일 에러가 발생하게 된다!
		 *      
		 * < 생성자 super() >
		 * - 슈퍼클래스의 생성자를 명시적으로 호출할 때 사용
		 *   => 생성자 this() 와 사용 방법 및 목적은 동일함
		 * - 기본 문법 : super([데이터...]);
		 * - 목적1) 슈퍼클래스 생성자 중 특정 생성자를 명시적으로 호출할 경우
		 *          ex) 슈퍼클래스에 기본 생성자 없이 파라미터 생성자만 정의 시
		 *              서브클래스 생성자에서 슈퍼클래스 기본 생성자를 호출할 수 없어
		 *              컴파일 에러가 발생하는데, 이 때 슈퍼클래스의
		 *              파라미터 생성자를 명시적으로 호출하기 위해 사용
		 * - 목적2) 슈퍼클래스의 생성자에 멤버변수 초기화 코드가 존재할 경우
		 *          ex) 서브클래스 생성자에서 슈퍼클래스의 멤버까지 초기화하면
		 *              초기화 코드의 중복이 발생하게 됨.
		 *              이 때, 슈퍼클래스의 멤버는 슈퍼클래스의 생성자에서,
		 *              서브클래스의 멤버는 서브클래스의 생성자에서 초기화하여
		 *              코드 중복을 제거하기 위해 사용
		 *              
		 * - 주의! 생성자 super() 는 반드시 생성자의 첫 문장에서 실행되어야 함!
		 *   => 따라서, 생성자 내에서 super() 와 this() 동시 사용 불가!
		 */
	}

}

class Person { // = class Person extends Object
	String name;
	int age;

	public Person(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	
}

class Student extends Person {
	boolean isStudyMode;
	
	public Student() {
		super("홍길동", 20);
	}
	
}











